・Project作成
npm i typeorm -g
typeorm init --name ProjectName --database mysql

MyProject
├── src              // place of your TypeScript code
│   ├── entity       // place where your entities (database models) are stored
│   │   └── User.ts  // sample entity
│   ├── migration    // place where your migrations are stored
│   └── index.ts     // start point of your application
├── .gitignore       // standard gitignore file
├── ormconfig.json   // ORM and database connection configuration
├── package.json     // node module dependencies
├── README.md        // simple readme file
└── tsconfig.json    // TypeScript compiler options

cd ProjectName
npm i

・ormconfig.jsonの編集
{
   "type": "mysql", // MySQLを利用する場合
   "host": "localhost", // ホスト名
   "port": 3306, // Port番号
   "username": "root", // MySQLログインユーザ名
   "password": "root", // MySQLログインパスワード
   "database": "wario", // DB名
   "synchronize": true, // trueの場合、サーバ起動時にEntityとDBを合わせる
   "logging": true, // trueの場合、サーバ起動時に実行されたSQLがログに吐かれる
   "entities": [
      "src/entity/**/*.ts"
   ],
   "migrations": [
      "src/migration/**/*.ts"
   ],
   "subscribers": [
      "src/subscriber/**/*.ts"
   ],
   "cli": {
      "entitiesDir": "src/entity",
      "migrationsDir": "src/migration",
      "subscribersDir": "src/subscriber"
   }
}

・Entityの作成
Eventテーブル、Userテーブルを作成する
UserテーブルのEventIdカラムを外部キーとして設定する

import {Entity, PrimaryGeneratedColumn, Column, OneToMany} from "typeorm"
import {User} from "./User"

@Entity()
export class Event {

    @PrimaryGeneratedColumn()
    id: number

    @Column()
    eventName: string

    @Column()
    aclId: number

    @OneToMany(type => User, user => user.event)
    users: User[]

    constructor (eventName: string, aclId: number) {
        this.eventName = eventName
        this.aclId = aclId
    }
}

import {Entity, PrimaryGeneratedColumn, Column, ManyToOne, ManyToMany, JoinColumn} from "typeorm";
import {Event} from "./Event"

@Entity()
export class User {

    @PrimaryGeneratedColumn()
    id: number;

    @Column()
    userName: string;

    @ManyToOne(type => Event, event => event.users)
    event: Event

    constructor (userName: string, event?: Event) {
        this.userName = userName
        this.event = event
    }
}

サーバを起動するとUserテーブルとEventテーブルが作成されている


・index.ts
ルーティングモジュールをインストールする
npm i routing^controllers
=> ルーティング用のモジュール

index.ts
import "reflect-metadata";
import {createConnection} from "typeorm";
import {createExpressServer} from 'routing-controllers'
import {EventController} from './controller/EventControllers'

createConnection().then(async () => {

    // create express app
    const app = createExpressServer({
        controllers: [
            EventController,
        ]
    })

    // start express server
    app.listen(3000);

    console.log("Express server has started on port 3000. Open http://localhost:3000/users to see results");

}).catch(error => console.log(error));


・コントローラー
import {getRepository, getManager} from "typeorm";
import {NextFunction, Request, Response} from "express";
import {Event} from "../entity/Event";
import {User} from "../entity/User"
import {JsonController, Get, Param, NotFoundError, InternalServerError, Post, BodyParam, Body} from 'routing-controllers'
import {OperationCanceledException} from "typescript";

@JsonController() // リクエストとレスポンスがjson形式であることを保証する
export class EventController {

    // イベント情報取得のAPI
    @Get('/api/event/:id')

    // @Content-type('xxxx') => 任意でコンテントタイプを設定可能
    // @Redirect('https://xxxxx') => リダイレクトを設定可能
    // @HttpCode(xxx) => 任意のHTTPコードを設定可能
    // @Header('xxxx':'xxx') => 任意のHTTPヘッダを設定可能
    async getEventInformation (
        @Param('id') id: number
    ) {
        // @Param(paramerter) paramerter: format => URLパラメータのvalidation
        // @BodyParam(paramerter) paramerter: format => POSTパラメータのvalidation
        // @HeaderParam(paramerter) paramerter: format => ヘッダーパラメータのvalidation
        // @CoolieParam(paramerter) paramerter: format => Coolieパラメータのvalidation
        // @SessionParam(paramerter) paramerter: format => Sessionパラメータのvalidation

        // @BodyParam(required: true) paramerter: format => POSTパラメータの必須チェック

        const eventRepository = getRepository(Event)

        // 認証

        // イベント情報取得
        try {

            let event = await eventRepository.findOne({
                where: {
                    id: id
                },
                relations: ['users']
            })
            console.log(event)

            // レスポンス
            return {
                status: 'success',
                result: {
                    eventid: event.id,
                    eventName: event.eventName,
                    member: event.users
                }
            }

        } catch (err) {
            console.error(err)
            return {
                status: 'Error',
                result: {}
            }
            throw new InternalServerError('Sever Error')
        }
    }

    // POST
    @Post('/api/event')
    async createEvent (
        @BodyParam("eventName") eventName: string,
        @BodyParam("member") member: string
    ) {

        console.log(`${eventName},${member}`)

        const eventRepository = getRepository(Event)

        // 認証

        let event = new Event(eventName, 1)
        let users = new User(member, event)

        let eventCreateRsult: Event | null
        let userCreateRsult: User | null

        // データ作成
        // ２つのテーブルにデータを挿入するためにトランザクションを設定する
        try {
            await getManager().transaction(async transactionalEntityManager => {
                eventCreateRsult = await transactionalEntityManager.save(event)
                userCreateRsult = await transactionalEntityManager.save(users)
            })

            if (eventCreateRsult != null && userCreateRsult != null) {

                return {
                    status: 'Success',
                    result: {
                        eventName: eventName,
                        member: member
                    }
                }
            } else {
                throw new OperationCanceledException()
            }

        } catch (err) {
            console.error(err)
            return {
                status: 'Error',
                result: {}
            }
        }
    }
}

・HEROKU
mysql接続先を変更する

